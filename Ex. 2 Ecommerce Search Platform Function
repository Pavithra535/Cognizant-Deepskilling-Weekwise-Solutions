/*1. Big O notation describes the upper bound of an algorithm’s running time, focusing on how its performance scales with the size of the input (n).
Example: O(1): Constant time — operation does not depend on input size.
O(n): Linear time — performance grows linearly with input size.
Best Case: The desired element is found at the beginning (O(1)).
Average Case: The element is found somewhere in the middle (O(n/2) for linear, O(log n) for binary).
Worst Case:
Linear Search: The element is at the end or not found — O(n).
Binary Search: Logarithmic time even in worst case — O(log n), assuming a sorted array.*/
// Initial setup
class Product {
    int productId;
    String productName;
    String category;

    public Product(int productId, String productName, String category) {
        this.productId = productId;
        this.productName = productName;
        this.category = category;
    }

    @Override
    public String toString() {
        return "ID: " + productId + ", Name: " + productName + ", Category: " + category;
    }
}
//3. Linear Search
public static Product linearSearch(Product[] products, String targetName) {
    for (Product product : products) {
        if (product.productName.equalsIgnoreCase(targetName)) {
            return product;
        }
    }
    return null;
}
// Binary Search
import java.util.Arrays;
import java.util.Comparator;

public static Product binarySearch(Product[] products, String targetName) {
    Arrays.sort(products, Comparator.comparing(p -> p.productName.toLowerCase()));

    int left = 0;
    int right = products.length - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        int comparison = products[mid].productName.compareToIgnoreCase(targetName);

        if (comparison == 0) return products[mid];
        else if (comparison < 0) left = mid + 1;
        else right = mid - 1;
    }
    return null;
}
/* 4. Analysis:
Linear Search:
Best Case: O(1)
Average Case: O(n/2)
Worst Case: O(n)

Binary Search:
Best Case: O(1)
Average Case : O(log n)
Worst Case : O(log n)

By analysing the time comlpexities, Binary search is more efficient than linear search.
